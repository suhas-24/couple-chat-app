import React, { useState, useRef, useEffect, useCallback } from 'react';
import socketService from '../../services/socketService';

interface Message {
  id: string;
  content: string;
  sender: 'me' | 'partner';
  timestamp: Date;
  emoji?: string;
  deliveryStatus?: 'sent' | 'delivered' | 'delivered_from_queue' | 'read';
  /**
   * Flag indicating that this message was generated by the AI assistant.
   * When true we render a special bubble and bot avatar.
   */
  isAI?: boolean;
}

interface ConnectionState {
  connected: boolean;
  reconnecting: boolean;
  error?: string;
}

interface ChatWindowProps {
  messages: Message[];
  partnerName: string;
  chatId: string;
  avatars: {
    me: string;
    partner: string;
  };
  onSend: (message: string) => void;
  onMessageReceived: (message: Message) => void;
  isTyping: boolean;
  onTypingChange: (isTyping: boolean) => void;
}

const ChatWindow: React.FC<ChatWindowProps> = ({
  messages,
  partnerName,
  chatId,
  avatars,
  onSend,
  onMessageReceived,
  isTyping,
  onTypingChange
}) => {
  const [inputMessage, setInputMessage] = useState('');
  const [connectionState, setConnectionState] = useState<ConnectionState>({ connected: false, reconnecting: false });
  const [typingUsers, setTypingUsers] = useState<string[]>([]);
  const [isUserTyping, setIsUserTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // Initialize socket connection and event listeners
  useEffect(() => {
    // Join chat room
    socketService.joinChat(chatId);

    // Set up event listeners
    socketService.onConnection(setConnectionState);
    
    socketService.onMessage((message) => {
      const formattedMessage: Message = {
        id: message._id,
        content: message.content.text,
        sender: 'partner', // Assuming received messages are from partner
        timestamp: new Date(message.timestamp),
        deliveryStatus: message.deliveryStatus
      };
      onMessageReceived(formattedMessage);
    });

    socketService.onTyping((users) => {
      const userNames = users.map(u => u.userName);
      setTypingUsers(userNames);
      onTypingChange(userNames.length > 0);
    });

    socketService.onDeliveryConfirmation((confirmation) => {
      console.log('Message delivery confirmed:', confirmation);
      // Update message delivery status in parent component
    });

    socketService.onError((error) => {
      console.error('Socket error:', error);
    });

    // Cleanup on unmount
    return () => {
      socketService.leaveChat(chatId);
      socketService.removeAllListeners();
    };
  }, [chatId, onMessageReceived, onTypingChange]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  // Handle input changes with typing indicators
  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInputMessage(value);

    // Handle typing indicators
    if (value.trim() && !isUserTyping) {
      setIsUserTyping(true);
      socketService.startTypingWithDebounce(chatId);
    }

    // Clear existing timeout
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    // Set timeout to stop typing
    typingTimeoutRef.current = setTimeout(() => {
      if (isUserTyping) {
        setIsUserTyping(false);
        socketService.stopTyping(chatId);
      }
    }, 1000);
  }, [chatId, isUserTyping]);

  // Handle sending messages with retry logic
  const handleSend = useCallback(async () => {
    if (!inputMessage.trim()) return;

    const messageText = inputMessage.trim();
    setInputMessage('');
    
    // Stop typing indicator
    if (isUserTyping) {
      setIsUserTyping(false);
      socketService.stopTyping(chatId);
    }

    // Clear typing timeout
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    try {
      // Create message object
      const messageData = {
        _id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        content: { text: messageText, type: 'text' },
        timestamp: new Date().toISOString()
      };

      // Send via socket with retry logic
      const success = await socketService.sendMessageWithRetry(chatId, messageData);
      
      if (success) {
        // Also call the parent onSend for local state update
        onSend(messageText);
      } else {
        // Message was queued, still call onSend for optimistic UI update
        onSend(messageText);
      }
    } catch (error) {
      console.error('Failed to send message:', error);
      // Still update UI optimistically
      onSend(messageText);
    }

    inputRef.current?.focus();
  }, [inputMessage, chatId, isUserTyping, onSend]);

  // Handle enter key press
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  // Group messages by date
  const groupMessagesByDate = (messages: Message[]) => {
    const groups: { [key: string]: Message[] } = {};
    
    messages.forEach(message => {
      const dateKey = message.timestamp.toDateString();
      if (!groups[dateKey]) {
        groups[dateKey] = [];
      }
      groups[dateKey].push(message);
    });
    
    return groups;
  };

  const messageGroups = groupMessagesByDate(messages);

  // Format date for display
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) {
      return 'Today';
    } else if (date.toDateString() === yesterday.toDateString()) {
      return 'Yesterday';
    } else {
      return date.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    }
  };

  // Format time for message
  const formatTime = (timestamp: Date) => {
    return timestamp.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  return (
    <div className="flex flex-col h-full bg-gradient-to-br from-pink-50 to-purple-50 relative overflow-hidden">
      {/* Decorative hearts background */}
      <div className="absolute inset-0 pointer-events-none overflow-hidden">
        <div className="absolute top-10 left-10 text-pink-200 opacity-20">
          <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
          </svg>
        </div>
        <div className="absolute top-32 right-20 text-purple-200 opacity-15">
          <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
          </svg>
        </div>
        <div className="absolute bottom-20 left-1/4 text-pink-200 opacity-10">
          <svg className="w-10 h-10" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
          </svg>
        </div>
      </div>

      {/* Chat Header with Connection Status */}
      <div className="bg-white/80 backdrop-blur-sm border-b border-pink-200 px-6 py-4 shadow-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <img 
                src={avatars.partner} 
                alt={partnerName}
                className="w-10 h-10 rounded-full border-2 border-pink-300 shadow-md"
              />
              <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 border-2 border-white rounded-full"></div>
            </div>
            <div>
              <h2 className="text-lg font-semibold text-gray-800 flex items-center">
                {partnerName}
                <span className="ml-2 text-pink-500">ðŸ’•</span>
              </h2>
              <p className="text-sm text-gray-500">
                {typingUsers.length > 0 ? `${typingUsers[0]} is typing...` : 'Online now'}
              </p>
            </div>
          </div>
          
          {/* Connection Status Indicator */}
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${
              connectionState.connected 
                ? 'bg-green-400' 
                : connectionState.reconnecting 
                ? 'bg-yellow-400 animate-pulse' 
                : 'bg-red-400'
            }`}></div>
            <span className="text-xs text-gray-500">
              {connectionState.connected 
                ? 'Connected' 
                : connectionState.reconnecting 
                ? 'Reconnecting...' 
                : 'Disconnected'}
            </span>
          </div>
        </div>
        
        {/* Connection Error Banner */}
        {connectionState.error && !connectionState.connected && (
          <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm text-red-600">
              Connection error: {connectionState.error}
              <button 
                onClick={() => socketService.forceReconnect()}
                className="ml-2 text-red-700 underline hover:no-underline"
              >
                Retry
              </button>
            </p>
          </div>
        )}
      </div>

      {/* Messages Container */}
      <div className="flex-1 overflow-y-auto px-4 py-6 space-y-4">
        {Object.entries(messageGroups).map(([dateKey, dateMessages]) => (
          <div key={dateKey}>
            {/* Date Separator */}
            <div className="flex justify-center my-6">
              <div className="bg-white/60 backdrop-blur-sm px-4 py-2 rounded-full shadow-sm border border-pink-200">
                <span className="text-sm font-medium text-gray-600">{formatDate(dateKey)}</span>
              </div>
            </div>

            {/* Messages for this date */}
            {dateMessages.map((message) => (
              <div
                key={message.id}
                className={`flex items-end space-x-2 ${
                  message.isAI
                    ? 'justify-center'
                    : message.sender === 'me'
                    ? 'justify-end'
                    : 'justify-start'
                }`}
              >
                {/* Partner Avatar */}
                {message.sender === 'partner' && !message.isAI && (
                  <img
                    src={avatars.partner}
                    alt={partnerName}
                    className="w-8 h-8 rounded-full border-2 border-purple-300 shadow-sm"
                  />
                )}

                {/* AI Avatar */}
                {message.isAI && (
                  <div className="w-8 h-8 rounded-full bg-violet-600 flex items-center justify-center text-white shadow-sm">
                    ðŸ¤–
                  </div>
                )}

                {/* Message Bubble */}
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl shadow-md ${
                    message.isAI
                      ? 'bg-gradient-to-r from-violet-500 to-indigo-500 text-white rounded-md'
                      : message.sender === 'me'
                      ? 'bg-gradient-to-r from-pink-500 to-rose-500 text-white rounded-br-md'
                      : 'bg-white border border-purple-200 text-gray-800 rounded-bl-md'
                  }`}
                >
                  <div className="flex items-start space-x-2">
                    <p className="text-sm leading-relaxed flex-1">{message.content}</p>
                    {message.emoji && (
                      <span className="text-lg flex-shrink-0">{message.emoji}</span>
                    )}
                  </div>
                  <div
                    className={`text-xs mt-2 flex items-center justify-between ${
                      message.sender === 'me'
                        ? 'text-pink-100'
                        : 'text-gray-500'
                    }`}
                  >
                    <span>{formatTime(message.timestamp)}</span>
                    {message.sender === 'me' && message.deliveryStatus && (
                      <span className="ml-2 flex items-center">
                        {message.deliveryStatus === 'sent' && (
                          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        )}
                        {message.deliveryStatus === 'delivered' && (
                          <div className="flex">
                            <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                            <svg className="w-3 h-3 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          </div>
                        )}
                        {message.deliveryStatus === 'read' && (
                          <div className="flex text-blue-300">
                            <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                            <svg className="w-3 h-3 -ml-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                          </div>
                        )}
                        {message.deliveryStatus === 'delivered_from_queue' && (
                          <div className="flex items-center">
                            <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                            </svg>
                            <span className="text-xs">ðŸ“¤</span>
                          </div>
                        )}
                      </span>
                    )}
                  </div>
                </div>

                {/* My Avatar */}
                {message.sender === 'me' && !message.isAI && (
                  <img
                    src={avatars.me}
                    alt="Me"
                    className="w-8 h-8 rounded-full border-2 border-pink-300 shadow-sm"
                  />
                )}
              </div>
            ))}
          </div>
        ))}

        {/* Typing Indicator */}
        {isTyping && (
          <div className="flex items-end space-x-2 justify-start">
            <img
              src={avatars.partner}
              alt={partnerName}
              className="w-8 h-8 rounded-full border-2 border-purple-300 shadow-sm"
            />
            <div className="bg-white border border-purple-200 rounded-2xl rounded-bl-md px-4 py-3 shadow-md">
              <div className="flex space-x-2 items-center">
                <div className="typing-animation">
                  <span className="dot bg-gray-400"></span>
                  <span className="dot bg-gray-400"></span>
                  <span className="dot bg-gray-400"></span>
                </div>
                <span className="text-sm text-gray-500 ml-2">{partnerName} is typing...</span>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Message Input */}
      <div className="bg-white/80 backdrop-blur-sm border-t border-pink-200 px-6 py-4">
        <div className="flex items-center space-x-3">
          {/* Emoji Button */}
          <button className="p-2 text-gray-500 hover:text-pink-500 hover:bg-pink-50 rounded-full transition-colors">
            <span className="text-xl">ðŸ˜Š</span>
          </button>

          {/* Message Input */}
          <div className="flex-1 relative">
            <input
              ref={inputRef}
              type="text"
              value={inputMessage}
              onChange={handleInputChange}
              onKeyPress={handleKeyPress}
              placeholder={`Message ${partnerName}... ðŸ’­`}
              disabled={!connectionState.connected}
              className={`w-full px-4 py-3 bg-gray-50 border border-pink-200 rounded-full focus:outline-none focus:ring-2 focus:ring-pink-300 focus:border-transparent transition-all placeholder-gray-500 ${
                !connectionState.connected ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            />
          </div>

          {/* Send Button */}
          <button
            onClick={handleSend}
            disabled={!inputMessage.trim()}
            className={`p-3 rounded-full transition-all ${
              inputMessage.trim()
                ? 'bg-gradient-to-r from-pink-500 to-rose-500 text-white shadow-lg hover:shadow-xl hover:scale-105'
                : 'bg-gray-200 text-gray-400 cursor-not-allowed'
            }`}
          >
            <svg
              className="w-5 h-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
              />
            </svg>
          </button>
        </div>

        {/* Love Quote Footer */}
        <div className="mt-3 text-center">
          <p className="text-xs text-gray-400 italic">
            "Every love story is beautiful, but ours is my favorite" ðŸ’•
          </p>
        </div>
      </div>

      {/* CSS for typing animation */}
      <style jsx>{`
        .typing-animation {
          display: flex;
          align-items: center;
          space-x: 4px;
        }
        
        .dot {
          width: 6px;
          height: 6px;
          border-radius: 50%;
          margin-right: 4px;
          animation: typingAnimation 1.4s infinite;
        }
        
        .dot:nth-child(1) {
          animation-delay: 0s;
        }
        
        .dot:nth-child(2) {
          animation-delay: 0.2s;
        }
        
        .dot:nth-child(3) {
          animation-delay: 0.4s;
        }
        
        @keyframes typingAnimation {
          0%, 60%, 100% {
            transform: scale(1);
            opacity: 0.5;
          }
          30% {
            transform: scale(1.3);
            opacity: 1;
          }
        }
      `}</style>
    </div>
  );
};

export default ChatWindow;

// Created with Comet Assistant
