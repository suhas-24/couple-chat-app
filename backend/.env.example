# =======================
# COUPLE CHAT APP - BACKEND CONFIGURATION
# =======================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file to version control

# =======================
# SERVER CONFIGURATION
# =======================

# Port for the backend server to run on
PORT=5000

# Node environment (development, production, test)
NODE_ENV=development

# Frontend URL for CORS configuration
FRONTEND_URL=http://localhost:3000

# =======================
# DATABASE CONFIGURATION
# =======================

# MongoDB connection string
# For local development:
# DATABASE_URL=mongodb://localhost:27017/couple-chat
# For MongoDB Atlas (cloud):
# DATABASE_URL=mongodb+srv://username:password@cluster.mongodb.net/couple-chat?retryWrites=true&w=majority
DATABASE_URL=mongodb://localhost:27017/couple-chat

# =======================
# JWT AUTHENTICATION
# =======================

# Secret key for JWT token signing (use a strong, random string)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=your_super_secret_jwt_key_here_make_it_long_and_random

# JWT token expiration time
JWT_EXPIRES_IN=7d

# =======================
# GOOGLE GEMINI AI CONFIGURATION
# =======================

# Google Gemini API key for AI features
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here

# Gemini model to use
GEMINI_MODEL=gemini-2.0-flash-exp

# =======================
# EMAIL CONFIGURATION
# =======================

# SMTP configuration for sending emails (verification, password reset, etc.)
# Using Gmail as an example - adjust for your email provider
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your_email@gmail.com
SMTP_PASS=your_app_password

# Email address to send from
FROM_EMAIL=noreply@couple-chat-app.com
FROM_NAME=Couple Chat App

# =======================
# ENCRYPTION & SECURITY
# =======================

# Encryption key for sensitive data (generate a random 32-byte hex string)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your_32_byte_encryption_key_in_hex_format

# Salt rounds for bcrypt password hashing
BCRYPT_SALT_ROUNDS=12

# Enable message encryption (always enabled for security)
ENABLE_MESSAGE_ENCRYPTION=true

# Enable file encryption at rest
ENABLE_FILE_ENCRYPTION=true

# Security headers configuration
SECURITY_HEADERS_ENABLED=true

# Input sanitization settings
ENABLE_INPUT_SANITIZATION=true
SANITIZATION_STRICT_MODE=false

# API key management
API_KEY_EXPIRATION_DAYS=90
API_KEY_ROTATION_ENABLED=true

# =======================
# FILE UPLOAD CONFIGURATION
# =======================

# Maximum file size for uploads (in bytes)
# 10MB = 10 * 1024 * 1024
MAX_FILE_SIZE=10485760

# Allowed file types for profile pictures
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/gif,image/webp

# Upload directory (relative to backend root)
UPLOAD_DIR=uploads

# =======================
# RATE LIMITING
# =======================

# Rate limiting configuration
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =======================
# LOGGING
# =======================

# Log level (error, warn, info, debug)
LOG_LEVEL=info

# Log file path (leave empty to log only to console)
LOG_FILE=

# =======================
# SESSION CONFIGURATION
# =======================

# Session secret for express-session (if using sessions)
SESSION_SECRET=your_session_secret_here

# =======================
# CORS CONFIGURATION
# =======================

# Additional allowed origins (comma-separated)
# ALLOWED_ORIGINS=https://yourdomain.com,https://www.yourdomain.com
ALLOWED_ORIGINS=

# =======================
# WEBSOCKET CONFIGURATION
# =======================

# WebSocket port (if different from main server)
WS_PORT=5001

# =======================
# THIRD-PARTY INTEGRATIONS
# =======================

# Google OAuth Configuration
# Get your Google Client ID from https://console.cloud.google.com/
# Use the same Client ID as the frontend
# Note: For Google Sign-In with OAuth 2.0, you only need the Client ID
GOOGLE_CLIENT_ID=your_google_client_id_here

# Facebook OAuth (if implementing Facebook login)
FACEBOOK_APP_ID=your_facebook_app_id
FACEBOOK_APP_SECRET=your_facebook_app_secret

# =======================
# DEVELOPMENT/DEBUGGING
# =======================

# Enable debug mode
DEBUG=false

# Enable detailed error logging
DETAILED_ERRORS=true

# =======================
# BACKUP CONFIGURATION
# =======================

# Database backup settings
BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=7

# =======================
# ANALYTICS & MONITORING
# =======================

# Google Analytics tracking ID (if implementing analytics)
GA_TRACKING_ID=

# Sentry DSN for error tracking
SENTRY_DSN=

# =======================
# FEATURE FLAGS
# =======================

# Enable/disable specific features
FEATURE_CSV_UPLOAD=true
FEATURE_AI_CHAT=true
FEATURE_CHAT_ANALYTICS=true
FEATURE_EMAIL_VERIFICATION=true
FEATURE_SOCIAL_LOGIN=false

# Created with Comet Assistant
# Last updated: 2025-01-12
